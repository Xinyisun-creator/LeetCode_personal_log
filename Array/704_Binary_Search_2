# Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums.
#  If target exists, then return its index. Otherwise, return -1.

# You must write an algorithm with O(log n) runtime complexity.

 

# Example 1:

# Input: nums = [-1,0,3,5,9,12], target = 9
# Output: 4
# Explanation: 9 exists in nums and its index is 4
# Example 2:

# Input: nums = [-1,0,3,5,9,12], target = 2
# Output: -1
# Explanation: 2 does not exist in nums so return -1
 

# Constraints:

# 1 <= nums.length <= 104
# -104 < nums[i], target < 104
# All the integers in nums are unique.
# nums is sorted in ascending order.

### 第一反应写的答案，没有砍掉一半的搜索范围，二分法不成立，为双指针法
class Solution_1(object):
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        left = 0
        right = len(nums) - 1

        while right >= left:
            if nums[right] == target:
                print("right")
                return right
            elif nums[left] == target:
                print("left")
                return left
            left += 1
            right -= 1

        return -1
    
### 看完了二分法的思路，尝试写一下二分法
## 左闭右闭    
class Solution_2(object):
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        left = 0
        right = len(nums) - 1

        while left <= right:
            middle = left + (right - left) // 2
            print("middle:" , nums[middle], "with index:" , middle)
            if  nums[middle] > target:
                right = middle - 1
            elif  nums[middle] < target:
                left = middle + 1
            elif  nums[middle] == target:
                return(middle)
        return -1

## 左闭右开  
class Solution_2(object):
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        left = 0
        right = len(nums)

        while left < right:
            middle = left + (right - left) // 2
            print("middle:" , nums[middle], "with index:" , middle)
            if  nums[middle] > target:
                right = middle
            elif  nums[middle] < target:
                left = middle + 1
            elif  nums[middle] == target:
                return(middle)
        return -1
    
nums = [-1,0,3,5,9,12]
target = 9
solution = Solution_2()
answ = solution.search(nums, target)
print(answ)